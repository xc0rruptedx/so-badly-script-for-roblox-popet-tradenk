----------------------shut up for deobfuscate-----------------------
==stop stealing scripts lollll==
return (function()local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIIIlIl = "\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110";local karrotlIIllllI=269;local karrotlIIlllIl=138;local karrotlIIlllII=3;local karrotlIIlIllI=function(a)local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';a=string.gsub(a,'[^'..b..'=]','')return a:gsub('.',function(c)if c=='='then return''end;local d,e='',b:find(c)-1;for f=6,1,-1 do d=d..(e%2^f-e%2^(f-1)>0 and'1'or'0')end;return d end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(c)if#c~=8 then return''end;local g=0;for f=1,8 do g=g+(c:sub(f,f)=='1'and 2^(8-f)or 0)end;return string.char(g)end)end;local karrotlIIlllIl=290;local karrotlIIlIlIl=(function()local function a(b)local c={}for d=0,255 do c[d]={}end;c[0][0]=b[1]*255;local e=1;for f=0,7 do for d=0,e-1 do for g=0,e-1 do local h=c[d][g]-b[1]*e;c[d][g+e]=h+b[2]*e;c[d+e][g]=h+b[3]*e;c[d+e][g+e]=h+b[4]*e end end;e=e*2 end;return c end;local i=a{0,1,1,0}local function j(self,k)local l,d,g=self.S,self.i,self.j;local m={}local n=string.char;for o=1,k do d=(d+1)%256;g=(g+l[d])%256;l[d],l[g]=l[g],l[d]m[o]=n(l[(l[d]+l[g])%256])end;self.i,self.j=d,g;return table.concat(m)end;local function p(self,q)local r=j(self,#q)local s={}local t=string.byte;local n=string.char;for d=1,#q do s[d]=n(i[t(q,d)][t(r,d)])end;return table.concat(s)end;local function u(self,v)local l=self.S;local g,w=0,#v;local t=string.byte;for d=0,255 do g=(g+l[d]+t(v,d%w+1))%256;l[d],l[g]=l[g],l[d]end end;function new(v)local l={}local s={S=l,i=0,j=0,generate=j,cipher=p,schedule=u}for d=0,255 do l[d]=d end;if v then s:schedule(v)end;return s end;return new end)();local fev=getfenv or function()return _ENV end;local karrotlIIlIlII=(function()if not bit then local bit_=nil pcall(function()bit_=require('bit') end)bit=bit_ end local bit=bit or bit32 or(function()local a={_TYPE='module',_NAME='bit.numberlua',_VERSION='0.3.1.20120131'}local b=math.floor;local c=2^32;local d=c-1;local function e(f)local g={}local h=setmetatable({},g)function g:__index(i)local j=f(i)h[i]=j;return j end;return h end;local function k(h,l)local function m(n,o)local p,q=0,1;while n~=0 and o~=0 do local r,s=n%l,o%l;p=p+h[r][s]*q;n=(n-r)/l;o=(o-s)/l;q=q*l end;p=p+(n+o)*q;return p end;return m end;local function t(h)local u=k(h,2^1)local v=e(function(n)return e(function(o)return u(n,o)end)end)return k(v,2^(h.n or 1))end;function a.tobit(w)return w%2^32 end;a.bxor=t{[0]={[0]=0,[1]=1},[1]={[0]=1,[1]=0},n=4}local x=a.bxor;function a.bnot(n)return d-n end;local y=a.bnot;function a.band(n,o)return(n+o-x(n,o))/2 end;local z=a.band;function a.bor(n,o)return d-z(d-n,d-o)end;local A=a.bor;local B,C;function a.rshift(n,D)if D<0 then return B(n,-D)end;return b(n%2^32/2^D)end;C=a.rshift;function a.lshift(n,D)if D<0 then return C(n,-D)end;return n*2^D%2^32 end;B=a.lshift;function a.tohex(w,E)E=E or 8;local F;if E<=0 then if E==0 then return''end;F=true;E=-E end;w=z(w,16^E-1)return('%0'..E..(F and'X'or'x')):format(w)end;local G=a.tohex;function a.extract(E,H,I)I=I or 1;return z(C(E,H),2^I-1)end;local J=a.extract;function a.replace(E,j,H,I)I=I or 1;local K=2^I-1;j=z(j,K)local L=y(B(K,H))return z(E,L)+B(j,H)end;local M=a.replace;function a.bswap(w)local n=z(w,0xff)w=C(w,8)local o=z(w,0xff)w=C(w,8)local N=z(w,0xff)w=C(w,8)local O=z(w,0xff)return B(B(B(n,8)+o,8)+N,8)+O end;local P=a.bswap;function a.rrotate(w,D)D=D%32;local Q=z(w,2^D-1)return C(w,D)+B(Q,32-D)end;local R=a.rrotate;function a.lrotate(w,D)return R(w,-D)end;local S=a.lrotate;a.rol=a.lrotate;a.ror=a.rrotate;function a.arshift(w,D)local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end;local U=a.arshift;function a.btest(w,V)return z(w,V)~=0 end;a.bit32={}local function W(w)return(-1-w)%c end;a.bit32.bnot=W;local function X(n,o,N,...)local T;if o then n=n%c;o=o%c;T=x(n,o)if N then T=X(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bxor=X;local function Y(n,o,N,...)local T;if o then n=n%c;o=o%c;T=(n+o-x(n,o))/2;if N then T=Y(T,N,...)end;return T elseif n then return n%c else return d end end;a.bit32.band=Y;local function Z(n,o,N,...)local T;if o then n=n%c;o=o%c;T=d-z(d-n,d-o)if N then T=Z(T,N,...)end;return T elseif n then return n%c else return 0 end end;a.bit32.bor=Z;function a.bit32.btest(...)return Y(...)~=0 end;function a.bit32.lrotate(w,D)return S(w%c,D)end;function a.bit32.rrotate(w,D)return R(w%c,D)end;function a.bit32.lshift(w,D)if D>31 or D<-31 then return 0 end;return B(w%c,D)end;function a.bit32.rshift(w,D)if D>31 or D<-31 then return 0 end;return C(w%c,D)end;function a.bit32.arshift(w,D)w=w%c;if D>=0 then if D>31 then return w>=0x80000000 and d or 0 else local T=C(w,D)if w>=0x80000000 then T=T+B(2^D-1,32-D)end;return T end else return B(w,-D)end end;function a.bit32.extract(w,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;return J(w,H,...)end;function a.bit32.replace(w,j,H,...)local I=...or 1;if H<0 or H>31 or I<0 or H+I>32 then error'out of range'end;w=w%c;j=j%c;return M(w,j,H,...)end;a.bit={}function a.bit.tobit(w)w=w%c;if w>=0x80000000 then w=w-c end;return w end;local _=a.bit.tobit;function a.bit.tohex(w,...)return G(w%c,...)end;function a.bit.bnot(w)return _(y(w%c))end;local function a0(n,o,N,...)if N then return a0(a0(n,o),N,...)elseif o then return _(A(n%c,o%c))else return _(n)end end;a.bit.bor=a0;local function a1(n,o,N,...)if N then return a1(a1(n,o),N,...)elseif o then return _(z(n%c,o%c))else return _(n)end end;a.bit.band=a1;local function a2(n,o,N,...)if N then return a2(a2(n,o),N,...)elseif o then return _(x(n%c,o%c))else return _(n)end end;a.bit.bxor=a2;function a.bit.lshift(w,E)return _(B(w%c,E%32))end;function a.bit.rshift(w,E)return _(C(w%c,E%32))end;function a.bit.arshift(w,E)return _(U(w%c,E%32))end;function a.bit.rol(w,E)return _(S(w%c,E%32))end;function a.bit.ror(w,E)return _(R(w%c,E%32))end;function a.bit.bswap(w)return _(P(w%c))end;return a end)()local unpack=table.unpack or unpack;local a3;local a4;local a5;local a6=50;local a7={[22]=18,[31]=8,[33]=28,[0]=3,[1]=13,[2]=23,[26]=33,[12]=1,[13]=6,[14]=10,[15]=16,[16]=20,[17]=26,[18]=30,[19]=36,[3]=0,[4]=2,[5]=4,[6]=7,[7]=9,[8]=12,[9]=14,[10]=17,[20]=19,[21]=22,[23]=24,[24]=27,[25]=29,[27]=32,[32]=34,[34]=37,[11]=5,[28]=11,[29]=15,[30]=21,[35]=25,[36]=31,[37]=35}local a8={[0]='ABC','ABx','ABC','ABC','ABC','ABx','ABC','ABx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','ABC','ABC','ABC','ABC','ABC','ABC','ABC','ABC','AsBx','AsBx','ABC','ABC','ABC','ABx','ABC'}local a9={[0]={b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgN'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgU',c='OpArgU'},{b='OpArgR',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgR'},{b='OpArgR',c='OpArgN'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgK',c='OpArgK'},{b='OpArgR',c='OpArgU'},{b='OpArgR',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgU',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgR',c='OpArgN'},{b='OpArgN',c='OpArgU'},{b='OpArgU',c='OpArgU'},{b='OpArgN',c='OpArgN'},{b='OpArgU',c='OpArgN'},{b='OpArgU',c='OpArgN'}}local function aa(ab,s,e,d)local ac=0;for i=s,e,d do ac=ac+string.byte(ab,i,i)*256^(i-s)end;return ac end;local function ad(ae,af,ag,ah)local ai=(-1)^bit.rshift(ah,7)local aj=bit.rshift(ag,7)+bit.lshift(bit.band(ah,0x7F),1)local ak=ae+bit.lshift(af,8)+bit.lshift(bit.band(ag,0x7F),16)local al=1;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7F then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-127)*(1+al/2^23)end;local function am(ae,af,ag,ah,an,ao,ap,aq)local ai=(-1)^bit.rshift(aq,7)local aj=bit.lshift(bit.band(aq,0x7F),4)+bit.rshift(ap,4)local ak=bit.band(ap,0x0F)*2^48;local al=1;ak=ak+ao*2^40+an*2^32+ah*2^24+ag*2^16+af*2^8+ae;if aj==0 then if ak==0 then return ai*0 else al=0;aj=1 end elseif aj==0x7FF then if ak==0 then return ai*1/0 else return ai*0/0 end end;return ai*2^(aj-1023)*(al+ak/2^52)end;local function ar(ab,s,e)return aa(ab,s,e-1,1)end;local function as(ab,s,e)return aa(ab,e-1,s,-1)end;local function at(ab,s)return ad(string.byte(ab,s,s+3))end;local function au(ab,s)local ae,af,ag,ah=string.byte(ab,s,s+3)return ad(ah,ag,af,ae)end;local function av(ab,s)return am(string.byte(ab,s,s+7))end;local function aw(ab,s)local ae,af,ag,ah,an,ao,ap,aq=string.byte(ab,s,s+7)return am(aq,ap,ao,an,ah,ag,af,ae)end;local ax={[4]={little=at,big=au},[8]={little=av,big=aw}}local function ay(S)local az=S.index;local aA=string.byte(S.source,az,az)S.index=az+1;return aA end;local function aB(S,aC)local aD=S.index+aC;local aE=string.sub(S.source,S.index,aD-1)S.index=aD;return aE end;local function aF(S)local aC=S:s_szt()local aE;if aC~=0 then aE=string.sub(aB(S,aC),1,-2)end;return aE end;local function aG(aC,aH)return function(S)local aD=S.index+aC;local aI=aH(S.source,S.index,aD)S.index=aD;return aI end end;local function aJ(aC,aH)return function(S)local aK=aH(S.source,S.index)S.index=S.index+aC;return aK end end;local function aL(S)local aM=S:s_int()local aN={}for i=1,aM do local aO=S:s_ins()local aP=bit.band(aO,0x3F)local aQ=a8[aP]local aR=a9[aP]local aS={value=aO,op=a7[aP],A=bit.band(bit.rshift(aO,6),0xFF)}if aQ=='ABC'then aS.B=bit.band(bit.rshift(aO,23),0x1FF)aS.C=bit.band(bit.rshift(aO,14),0x1FF)aS.is_KB=aR.b=='OpArgK'and aS.B>0xFF;aS.is_KC=aR.c=='OpArgK'and aS.C>0xFF elseif aQ=='ABx'then aS.Bx=bit.band(bit.rshift(aO,14),0x3FFFF)aS.is_K=aR.b=='OpArgK'elseif aQ=='AsBx'then aS.sBx=bit.band(bit.rshift(aO,14),0x3FFFF)-131071 end;aN[i]=aS end;return aN end;local function aT(S)local aM=S:s_int()local aU={}for i=1,aM do local aV=ay(S)local k;if aV==1 then k=ay(S)~=0 elseif aV==3 then k=S:s_num()elseif aV==4 then k=aF(S)end;aU[i]=k end;return aU end;local function aW(S,ab)local aM=S:s_int()local aX={}for i=1,aM do aX[i]=a5(S,ab)end;return aX end;local function aY(S)local aM=S:s_int()local aZ={}for i=1,aM do aZ[i]=S:s_int()end;return aZ end;local function a_(S)local aM=S:s_int()local b0={}for i=1,aM do b0[i]={varname=aF(S),startpc=S:s_int(),endpc=S:s_int()}end;return b0 end;local function b1(S)local aM=S:s_int()local b2={}for i=1,aM do b2[i]=aF(S)end;return b2 end;function a5(S,b3)local b4={}local ab=aF(S)or b3;b4.source=ab;S:s_int()S:s_int()b4.numupvals=ay(S)b4.numparams=ay(S)ay(S)ay(S)b4.code=aL(S)b4.const=aT(S)b4.subs=aW(S,ab)b4.lines=aY(S)a_(S)b1(S)for _,v in ipairs(b4.code)do if v.is_K then v.const=b4.const[v.Bx+1]else if v.is_KB then v.const_B=b4.const[v.B-0xFF]end;if v.is_KC then v.const_C=b4.const[v.C-0xFF]end end end;return b4 end;function a3(ab)local b5;local b6;local b7;local b8;local b9;local ba;local bb;local bc={index=1,source=ab}assert(aB(bc,4)=='\27Lua','invalid Lua signature')assert(ay(bc)==0x51,'invalid Lua version')assert(ay(bc)==0,'invalid Lua format')b6=ay(bc)~=0;b7=ay(bc)b8=ay(bc)b9=ay(bc)ba=ay(bc)bb=ay(bc)~=0;b5=b6 and ar or as;bc.s_int=aG(b7,b5)bc.s_szt=aG(b8,b5)bc.s_ins=aG(b9,b5)if bb then bc.s_num=aG(ba,b5)elseif ax[ba]then bc.s_num=aJ(ba,ax[ba][b6 and'little'or'big'])else error('unsupported float size')end;return a5(bc,'@virtual')end;local function bd(be,bf)for i,bg in pairs(be)do if bg.index>=bf then bg.value=bg.store[bg.index]bg.store=bg;bg.index='value'be[i]=nil end end end;local function bh(be,bf,bi)local bj=be[bf]if not bj then bj={index=bf,store=bi}be[bf]=bj end;return bj end;local function bk(...)return select('#',...),{...}end;local function bl(bm,bn)local ab=bm.source;local bo=bm.lines[bm.pc-1]local b3,bp,bq=string.match(bn,'^(.-):(%d+):%s+(.+)')local br='%s:%i: [%s:%i] %s'bo=bo or'0'b3=b3 or'?'bp=bp or'0'bq=bq or bn;error(string.format(br,ab,bo,b3,bp,bq),0)end;local function bs(bm)local aN=bm.code;local bt=bm.subs;local bu=bm.env;local bv=bm.upvals;local bw=bm.varargs;local bx=-1;local by={}local bi=bm.stack;local bz=bm.pc;while true do local bA=aN[bz]local aP=bA.op;bz=bz+1;if aP<18 then if aP<8 then if aP<3 then if aP<1 then for i=bA.A,bA.B do bi[i]=nil end elseif aP>1 then local bg=bv[bA.B]bi[bA.A]=bg.store[bg.index]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB+bC end elseif aP>3 then if aP<6 then if aP>4 then local A=bA.A;local B=bA.B;local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[A+1]=bi[B]bi[A]=bi[B][bf]else bi[bA.A]=bu[bA.const]end elseif aP>6 then local bf;if bA.is_KC then bf=bA.const_C else bf=bi[bA.C]end;bi[bA.A]=bi[bA.B][bf]else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB-bC end else bi[bA.A]=bi[bA.B]end elseif aP>8 then if aP<13 then if aP<10 then bu[bA.const]=bi[bA.A]elseif aP>10 then if aP<12 then local A=bA.A;local B=bA.B;local C=bA.C;local bD;local bE,bF;if B==0 then bD=bx-A else bD=B-1 end;bE,bF=bk(bi[A](unpack(bi,A+1,A+bD)))if C==0 then bx=A+bE-1 else bE=C-1 end;for i=1,bE do bi[A+i-1]=bF[i]end else local bg=bv[bA.B]bg.store[bg.index]=bi[bA.A]end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB*bC end elseif aP>13 then if aP<16 then if aP>14 then local A=bA.A;local B=bA.B;local bD;if B==0 then bD=bx-A else bD=B-1 end;bd(by,0)return bk(bi[A](unpack(bi,A+1,A+bD)))else local bf,bG;if bA.is_KB then bf=bA.const_B else bf=bi[bA.B]end;if bA.is_KC then bG=bA.const_C else bG=bi[bA.C]end;bi[bA.A][bf]=bG end elseif aP>16 then bi[bA.A]={}else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB/bC end else bi[bA.A]=bA.const end else local A=bA.A;local bH=bi[A+2]local bf=bi[A]+bH;local bI=bi[A+1]local bJ;if bH==math.abs(bH)then bJ=bf<=bI else bJ=bf>=bI end;if bJ then bi[bA.A]=bf;bi[bA.A+3]=bf;bz=bz+bA.sBx end end elseif aP>18 then if aP<28 then if aP<23 then if aP<20 then bi[bA.A]=#bi[bA.B]elseif aP>20 then if aP<22 then local A=bA.A;local B=bA.B;local bK={}local aM;if B==0 then aM=bx-A+1 else aM=B-1 end;for i=1,aM do bK[i]=bi[A+i-1]end;bd(by,0)return aM,bK else local aE=bi[bA.B]for i=bA.B+1,bA.C do aE=aE..bi[i]end;bi[bA.A]=aE end else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB%bC end elseif aP>23 then if aP<26 then if aP>24 then bd(by,bA.A)else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB==bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 end elseif aP>26 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 else local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;bi[bA.A]=bB^bC end else bi[bA.A]=bA.B~=0;if bA.C~=0 then bz=bz+1 end end elseif aP>28 then if aP<33 then if aP<30 then local bB,bC;if bA.is_KB then bB=bA.const_B else bB=bi[bA.B]end;if bA.is_KC then bC=bA.const_C else bC=bi[bA.C]end;if bB<=bC==(bA.A~=0)then bz=bz+aN[bz].sBx end;bz=bz+1 elseif aP>30 then if aP<32 then local aX=bt[bA.Bx+1]local bL=aX.numupvals;local bM;if bL~=0 then bM={}for i=1,bL do local bN=aN[bz+i-1]if bN.op==a7[0]then bM[i-1]=bh(by,bN.B,bi)elseif bN.op==a7[4]then bM[i-1]=bv[bN.B]end end;bz=bz+bL end;bi[bA.A]=a4(aX,bu,bM)else local A=bA.A;local B=bA.B;if not bi[B]==(bA.C~=0)then bz=bz+1 else bi[A]=bi[B]end end else bi[bA.A]=-bi[bA.B]end elseif aP>33 then if aP<36 then if aP>34 then local A=bA.A;local aM=bA.B;if aM==0 then aM=bw.size;bx=A+aM-1 end;for i=1,aM do bi[A+i-1]=bw.list[i]end else local A=bA.A;local bO,bI,bH;bO=assert(tonumber(bi[A]),'`for` initial value must be a number')bI=assert(tonumber(bi[A+1]),'`for` limit must be a number')bH=assert(tonumber(bi[A+2]),'`for` step must be a number')bi[A]=bO-bH;bi[A+1]=bI;bi[A+2]=bH;bz=bz+bA.sBx end elseif aP>36 then local A=bA.A;local C=bA.C;local aM=bA.B;local bP=bi[A]local bQ;if aM==0 then aM=bx-A end;if C==0 then C=bA[bz].value;bz=bz+1 end;bQ=(C-1)*a6;for i=1,aM do bP[i+bQ]=bi[A+i]end else bi[bA.A]=not bi[bA.B]end else if not bi[bA.A]==(bA.C~=0)then bz=bz+1 end end else local A=bA.A;local aH=bi[A]local bR=bi[A+1]local bf=bi[A+2]local bS=A+3;local bK;bi[bS+2]=bf;bi[bS+1]=bR;bi[bS]=aH;bK={aH(bR,bf)}for i=1,bA.C do bi[bS+i-1]=bK[i]end;if bi[bS]~=nil then bi[A+2]=bi[bS]else bz=bz+1 end end else bz=bz+bA.sBx end;bm.pc=bz end end;function a4(bR,bu,b2)local bT=bR.code;local bU=bR.subs;local bV=bR.lines;local bW=bR.source;local bX=bR.numparams;local function bY(...)local bi={}local bZ={}local b_=0;local c0,c1=bk(...)local bm;local c2,bn,bK;for i=1,bX do bi[i-1]=c1[i]end;if bX<c0 then b_=c0-bX;for i=1,b_ do bZ[i]=c1[bX+i]end end;bm={varargs={list=bZ,size=b_},code=bT,subs=bU,lines=bV,source=bW,env=bu,upvals=b2,stack=bi,pc=1}c2,bn,bK=pcall(bs,bm,...)if c2 then return unpack(bK,1,bn)else bl(bm,bn)end;return end;return bY end;return function(c3,bu)return a4(a3(c3),bu or fev(0))end end)();local karrotlIIllIIl='\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110';local karrotlIIlIIIl="\104\78\90\56\110\71\120\101\74\113\78\48\106\80\111\57\112\54\118\86\47\74\73\69\106\115\55\72\101\88\47\51\102\72\66\71\88\119\116\99\48\98\50\47\47\80\104\87\104\66\101\118\66\72\70\85\109\112\110\80\108\86\87\106\101\73\66\57\112\72\48\120\99\109\47\121\67\104\83\108\108\78\69\90\89\75\51\106\101\120\70\70\85\88\68\84\56\102\79\80\48\118\71\105\107\109\88\85\122\47\87\105\47\71\121\52\102\86\80\47\54\74\102\52\74\53\107\48\55\82\104\47\121\74\97\73\121\43\80\121\78\117\49\102\77\70\48\120\109\122\80\120\47\98\56\90\49\104\85\109\73\43\67\67\51\74\68\69\111\66\76\78\87\78\43\111\108\105\50\121\70\88\70\66\121\49\54\67\78\56\99\80\116\56\114\78\97\114\43\81\71\99\109\81\85\66\49\50\53\122\48\71\76\112\99\70\115\112\81\119\115\109\75\98\48\114\120\101\77\112\111\55\116\113\75\48\109\99\97\77\89\76\99\57\77\69\89\100\88\88\111\108\48\90\108\68\104\89\81\54\53\50\110\121\105\67\73\89\53\114\70\69\85\118\74\103\121\86\120\49\55\121\53\56\97\100\77\121\67\104\74\81\70\74\81\77\120\66\99\122\81\82\107\109\74\109\116\109\79\53\48\80\112\66\108\52\110\53\115\68\49\57\122\53\115\70\67\107\78\65\71\99\119\83\52\77\49\43\103\72\66\115\78\118\49\50\52\89\102\88\121\100\104\87\86\118\109\112\49\102\50\47\110\101\88\79\49\55\54\119\77\72\71\109\73\81\121\111\107\51\43\48\108\48\118\86\68\89\47\115\54\71\87\103\75\120\87\87\113\51\90\79\113\112\80\53\118\55\80\101\50\100\106\76\116\99\113\78\81\57\51\52\52\51\77\102\112\81\110\86\54\113\50\86\51\87\43\122\43\82\72\75\98\72\50\51\115\103\118\57\118\118\99\43\50\57\101\107\102\69\115\88\87\102\118\110\68\74\72\114\113\76\43\113\55\56\107\90\104\120\109\78\120\119\80\85\118\56\85\43\68\72\118\48\52\86\97\103\48\80\116\110\47\99\51\115\43\87\101\114\88\67\108\115\106\65\113\108\88\57\111\106\121\70\102\112\108\55\69\99\50\109\119\103\55\76\119\82\50\48\56\112\68\57\66\77\66\68\101\116\111\53\67\48\103\54\72\102\86\49\98\87\84\120\70\57\71\47\100\52\116\89\53\82\108\57\122\121\106\104\78\120\81\53\112\107\74\66\118\55\48\65\66\71\71\43\106\97\122\101\43\55\68\57\48\77\114\70\115\66\109\115\82\65\98\84\71\117\107\74\49\100\68\111\116\76\106\109\50\104\87\56\119\104\74\120\56\76\49\70\109\112\110\113\115\66\88\102\72\55\121\109\76\116\118\99\90\113\81\56\82\97\97\115\70\79\79\122\80\43\120\118\100\100\116\57\50\72\89\111\82\105\115\47\107\103\55\78\100\69\55\57\74\117\103\71\51\43\103\115\97\65\97\66\56\107\115\89\102\55\87\109\55\47\75\121\106\90\85\88\112\120\121\108\87\67\116\86\110\69\77\76\115\77\65\67\98\47\102\68\67\115\80\69\98\105\68\115\52\55\113\53\70\104\71\56\104\99\74\88\118\106\53\66\105\121\67\48\79\114\80\103\66\50\78\113\51\67\52\108\87\106\72\122\115\65\66\108\50\119\116\53\100\73\75\71\56\113\110\82\118\73\78\82\90\104\86\67\81\48\82\51\108\112\120\51\51\67\76\111\116\48\69\89\67\110\122\119\104\68\80\75\73\111\85\106\75\86\52\53\83\88\79\84\49\74\57\100\116\108\105\71\119\77\52\81\116\105\65\67\66\113\56\75\107\84\97\71\110\104\88\116\68\51\100\71\88\109\117\114\99\74\113\99\57\109\74\104\107\77\72\65\52\82\84\88\108\98\120\108\66\51\75\48\112\49\98\117\121\115\86\79\110\100\47\88\53\114\81\88\43\119\49\100\114\115\121\67\99\106\90\74\51\51\103\72\75\99\43\52\81\74\115\122\112\121\115\87\107\100\119\66\50\98\117\56\118\108\105\114\83\57\109\48\47\103\67\54\122\112\117\73\79\73\104\53\88\56\102\100\84\114\78\107\107\57\79\83\51\88\56\90\57\82\112\71\54\84\67\85\101\84\100\114\103\56\108\107\52\99\81\100\117\80\69\121\111\69\90\75\57\53\111\50\100\48\112\72\55\54\116\47\103\116\104\108\114\43\99\114\104\54\75\53\101\97\101\98\114\105\51\90\55\68\117\68\97\66\48\116\115\75\115\55\51\113\112\119\71\97\66\110\77\72\50\101\89\76\90\111\74\82\75\97\117\76\105\47\57\120\106\67\80\108\87\111\112\88\120\72\90\100\69\48\86\69\82\82\51\77\57\73\69\87\79\51\74\114\74\54\103\54\52\114\100\65\88\120\48\121\49\107\89\50\110\54\68\85\121\107\89\120\78\108\84\76\49\104\102\115\79\49\120\106\43\113\84\108\67\86\115\57\86\107\55\122\67\73\75\113\112\52\88\97\57\50\71\115\102\113\54\81\56\122\85\90\111\84\73\116\80\89\90\75\105\116\88\71\118\51\52\72\118\87\84\119\111\55\110\119\99\118\55\122\108\65\86\112\81\99\78\55\109\76\98\120\83\83\65\111\82\77\88\74\113\48\110\90\84\66\57\53\116\104\43\90\100\117\121\111\78\54\56\83\50\84\110\54\66\119\121\88\103\66\103\104\67\55\56\74\118\85\49\49\49\72\117\71\54\72\111\79\56\90\85\48\76\77\74\79\113\68\103\111\57\53\120\43\108\102\50\74\49\43\69\83\90\55\109\85\112\52\103\57\56\114\70\80\97\116\101\67\50\82\108\109\118\109\86\115\74\75\120\75\98\49\109\83\115\109\78\109\100\66\76\120\97\75\52\112\102\105\100\55\76\51\99\110\47\111\111\84\56\104\81\109\115\52\97\86\82\69\111\66\86\83\119\48\90\81\49\84\85\82\51\90\90\119\88\71\103\89\103\110\102\85\107\113\84\100\109\79\68\107\76\50\90\50\67\101\51\86\98\81\107\83\105\97\65\49\119\104\67\69\48\119\122\89\56\103\83\67\115\88\47\75\75\110\65\110\72\89\56\74\116\121\83\115\100\74\83\110\50\56\116\100\69\104\54\107\113\89\112\76\122\78\56\77\71\122\56\108\84\89\69\51\116\97\52\53\71\76\107\110\112\109\72\47\113\68\116\111\55\99\77\43\114\117\56\119\103\108\71\66\69\73\106\119\69\68\43\74\65\103\84\56\75\75\55\116\83\57\57\72\50\68\69\80\102\90\100\122\51\104\76\108\47\98\53\114\51\68\49\80\84\119\51\104\118\47\106\57\112\97\52\79\66\73\47\78\51\85\67\109\109\105\102\57\66\109\87\55\56\81\113\101\57\73\70\117\100\86\102\76\68\56\88\84\57\76\105\77\118\54\110\118\76\54\43\121\79\98\49\100\52\108\109\82\56\88\82\80\75\43\101\113\79\48\82\67\67\102\69\49\84\72\110\86\99\114\121\67\104\54\112\57\47\79\116\75\116\50\80\112\81\89\78\99\90\57\87\110\119\88\70\67\79\73\101\53\80\98\49\74\100\47\102\106\120\117\87\88\54\121\79\118\65\48\87\101\81\73\122\111\50\120\106\116\81\104\118\81\83\51\104\80\51\70\72\112\48\65\80\84\101\119\82\76\111\76\120\81\66\74\65\114\79\72\84\56\65\118\101\82\43\78\109\100\54\53\48\53\81\121\47\110\118\106\101\87\106\99\104\114\57\67\48\105\98\116\79\74\86\83\73\117\90\43\51\70\83\89\53\75\90\97\84\52\77\57\121\78\103\122\98\70\85\122\113\102\87\109\50\76\50\68\112\119\106\119\106\70\87\80\101\118\108\73\103\81\75\83\116\87\115\85\101\56\105\114\87\83\121\104\99\117\106\53\67\114\108\74\47\122\52\70\105\53\48\120\118\52\121\55\70\80\80\99\75\50\72\108\90\47\116\90\47\43\65\56\78\88\113\75\50\66\116\73\48\99\54\108\117\77\122\80\84\43\52\53\87\79\80\108\50\104\118\83\67\85\56\113\54\90\100\113\65\48\104\69\74\43\74\69\106\119\71\81\87\68\122\43\73\121\100\105\49\116\43\116\74\105\106\110\103\116\116\83\116\79\117\99\117\90\86\54\102\111\119\65\110\114\117\110\53\56\84\97\98\65\90\80\67\83\98\90\77\67\84\104\47\88\51\116\86\73\81\121\68\87\55\109\115\118\111\90\115\77\69\72\68\87\53\69\118\81\57\97\69\108\105\77\73\107\105\80\112\48\121\85\110\115\55\108\87\68\89\110\43\50\43\73\77\84\120\86\90\87\110\53\102\108\67\99\110\51\73\122\49\69\50\66\108\74\74\74\52\85\54\111\116\97\80\53\74\49\104\85\110\79\113\98\53\88\114\97\74\112\55\69\83\50\51\102\100\68\51\86\43\53\109\88\86\107\82\103\113\69\109\51\111\43\71\56\54\109\48\117\85\116\75\86\56\65\110\76\86\114\111\120\76\75\74\66\104\88\89\70\49\120\54\117\120\78\121\78\43\85\67\48\110\122\105\68\90\78\86\105\89\73\122\83\48\111\90\83\97\98\43\76\75\110\47\118\106\83\122\116\75\119\67\90\99\66\73\108\79\43\73\50\115\82\89\114\121\68\114\116\84\84\100\90\99\102\83\71\89\80\43\67\57\110\78\74\52\111\103\54\77\53\78\88\55\65\70\100\69\120\70\82\97\82\65\75\51\98\110\98\76\102\65\107\121\107\47\101\52\47\98\109\54\47\65\68\57\51\86\98\76\53\115\51\65\82\90\70\113\66\121\76\81\54\110\122\66\86\118\68\81\47\103\54\120\115\84\101\80\79\108\49\115\115\111\84\87\110\85\50\68\74\88\120\90\119\105\74\121\47\118\85\57\100\115\87\120\81\119\65\49\50\81\49\74\103\53\56\72\116\108\53\115\103\98\122\52\78\86\88\66\55\114\55\110\47\43\74\102\80\73\116\56\107\120\90\75\102\71\87\54\86\68\113\75\105\53\56\86\108\103\49\110\118\81\82\106\53\117\100\87\110\100\69\72\111\102\47\65\79\81\73\66\55\107\122\81\77\99\115\98\84\43\110\77\55\56\114\81\56\89\55\49\108\112\98\90\118\74\66\81\80\114\48\85\116\68\108\90\109\78\57\113\98\112\43\65\49\79\43\51\99\86\71\57\89\57\81\73\72\108\49\71\84\111\78\108\105\117\54\53\65\111\104\108\75\74\79\76\120\73\117\85\103\98\65\50\111\98\101\114\88\101\119\70\110\121\90\122\85\97\79\109\54\97\90\84\77\74\107\81\82\113\53\82\114\102\74\48\72\75\121\107\43\120\47\48\74\114\90\106\43\55\75\120\100\119\48\75\100\83\120\118\51\97\88\103\66\71\48\88\114\77\85\111\47\72\53\116\68\65\56\87\43\117\107\77\79\86\106\75\53\117\111\66\76\50\113\84\117\114\76\72\74\107\97\49\86\86\120\48\111\65\75\107\51\72\109\73\70\114\68\104\53\77\74\76\114\56\55\112\110\86\81\52\120\69\106\78\121\113\70\88\89\113\48\74\83\103\115\51\53\111\101\104\75\109\78\83\88\82\109\73\105\121\83\66\80\121\80\107\113\110\118\87\99\49\76\81\109\48\110\103\70\106\99\88\119\53\107\90\69\104\79\81\68\117\54\43\87\110\47\65\83\48\120\55\98\82\77\104\98\118\71\51\113\55\121\80\47\71\65\49\122\97\74\90\80\55\77\72\107\54\121\69\80\79\118\98\68\53\81\85\43\79\110\49\67\81\122\101\116\86\113\119\71\101\84\76\106\106\82\76\88\84\51\79\43\99\84\82\103\88\49\72\85\72\47\111\78\87\67\86\121\105\117\68\99\81\87\56\122\57\103\86\70\74\78\54\87\56\86\85\109\117\105\43\119\97\97\105\47\100\49\88\56\115\74\117\71\73\111\51\100\43\118\110\48\68\120\121\71\69\80\119\53\82\97\85\102\108\98\120\57\75\56\73\56\122\83\84\102\105\119\108\119\66\99\65\89\80\55\71\55\105\113\47\49\113\88\87\97\75\114\102\122\57\101\120\109\78\66\111\48\107\53\100\108\78\99\76\79\106\87\71\109\105\82\120\111\78\75\78\79\49\48\84\68\80\90\110\80\84\121\70\85\112\72\73\112\116\103\117\83\73\110\78\107\106\112\83\122\105\53\86\112\100\54\66\121\115\56\90\114\104\118\51\110\75\102\111\47\52\98\90\120\97\120\112\47\90\117\89\57\50\75\66\120\103\115\47\119\120\74\79\82\71\84\87\101\118\56\53\114\80\120\121\83\101\67\100\89\85\71\49\89\104\102\56\49\107\121\75\80\47\121\54\78\78\78\73\77\71\121\69\84\43\76\82\54\100\108\43\54\49\66\73\121\47\110\105\116\85\89\57\55\75\72\67\100\90\77\86\111\69\72\120\48\82\101\121\103\81\73\81\82\74\71\112\122\73\122\90\75\71\103\70\43\120\77\43\110\110\50\122\85\79\69\89\69\82\53\57\43\84\77\49\98\102\51\56\66\87\118\112\111\49\68\75\87\97\72\98\79\108\119\115\79\72\114\52\52\72\79\83\106\117\98\78\56\117\111\121\69\100\107\103\113\71\116\81\99\72\113\90\56\117\121\73\67\99\52\51\54\48\67\68\111\109\102\82\80\113\108\103\88\107\52\78\77\97\54\108\104\75\87\120\82\100\74\74\109\97\113\106\69\48\97\74\77\112\88\73\109\108\65\84\83\76\110\50\104\102\78\73\106\81\117\113\53\76\48\65\48\50\48\68\74\47\71\112\122\117\74\72\117\77\122\121\105\67\122\72\54\83\100\54\98\48\105\113\98\87\98\115\106\106\78\122\108\98\53\66\72\70\111\85\76\114\116\73\73\65\82\55\68\49\103\120\48\110\49\100\111\73\47\119\88\50\80\120\71\66\106\89\57\85\55\76\99\47\119\52\83\55\54\100\53\83\76\50\86\120\105\97\119\112\76\89\115\99\83\70\67\43\57\73\71\105\99\117\43\85\70\118\83\57\89\74\115\109\122\79\106\103\43\112\101\84\89\82\114\90\84\72\86\121\107\87\90\57\86\121\90\82\83\86\81\102\119\87\104\107\71\105\57\105\98\109\101\112\114\121\69\80\72\66\48\74\108\83\73\49\74\65\118\86\81\89\112\104\108\67\113\84\85\122\79\85\81\111\101\66\68\104\56\116\107\100\97\84\98\48\56\112\67\51\113\97\118\55\75\117\57\77\118\89\71\85\71\75\101\51\120\70\75\66\73\97\86\72\52\80\82\48\108\55\85\47\99\55\85\56\81\78\65\115\106\105\90\78\122\55\97\116\83\56\83\66\115\89\48\86\80\73\117\75\47\67\55\104\56\110\53\103\118\81\48\57\76\54\80\119\54\88\114\72\121\77\105\75\87\86\107\67\54\102\78\69\84\67\104\85\105\49\119\76\68\72\106\49\65\114\98\55\80\121\54\74\47\68\76\81\81\48\111\75\111\103\69\109\120\109\82\79\87\108\81\118\53\72\120\65\112\79\52\79\74\103\70\76\56\79\105\75\107\104\113\100\105\88\121\113\114\108\65\55\111\80\114\104\109\83\122\54\57\112\65\118\101\114\100\76\111\77\75\75\77\54\78\74\72\66\53\88\53\117\67\69\89\76\78\97\52\71\50\112\47\74\115\86\80\106\109\110\117\79\98\73\99\48\74\84\115\119\122\83\73\114\84\55\107\80\57\89\57\71\85\70\84\108\117\81\74\114\100\65\88\52\85\88\53\68\106\85\89\88\76\65\113\72\69\65\119\120\67\116\80\100\73\49\72\68\48\82\114\83\88\57\69\117\76\81\118\111\43\43\69\102\108\116\120\101\67\68\50\75\113\88\116\79\107\51\53\86\47\66\57\117\114\104\76\115\109\73\74\54\49\104\70\55\57\73\98\80\88\89\119\97\87\50\56\78\101\112\70\53\101\81\90\118\101\68\77\76\82\120\73\97\116\52\87\73\110\113\104\104\57\88\89\48\54\84\86\85\115\52\88\57\83\108\72\72\120\48\117\74\48\98\106\120\107\57\51\43\77\117\89\80\77\82\119\78\74\121\47\99\121\103\65\55\115\69\53\106\109\98\53\77\85\55\84\49\50\98\47\98\80\49\108\53\82\120\52\71\113\43\50\112\54\120\72\43\74\99\65\76\118\65\99\87\67\68\82\48\81\54\74\47\81\75\75\70\83\113\78\102\83\48\87\99\110\112\120\48\85\103\110\75\52\122\117\86\73\89\79\84\118\116\89\67\65\98\121\115\48\115\82\80\80\103\110\78\112\99\75\74\70\114\69\116\79\103\110\103\106\52\101\70\67\104\120\56\49\80\121\107\78\81\118\75\105\107\98\52\105\53\81\80\56\90\78\66\114\98\84\47\53\109\66\117\112\108\86\67\101\116\80\115\79\43\111\84\102\70\71\81\121\103\76\89\49\56\65\57\106\51\108\113\66\100\119\76\109\76\47\102\88\54\98\49\86\102\118\56\67\106\118\57\122\74\77\107\75\47\112\117\111\48\100\107\121\76\81\112\43\67\117\68\119\121\87\52\102\77\56\100\83\115\67\52\53\84\80\48\97\55\74\70\74\98\102\108\107\110\113\120\67\87\103\114\89\97\97\68\76\117\104\117\72\50\84\97\111\53\80\110\71\83\112\108\70\65\43\121\76\87\65\67\99\83\49\72\119\43\47\69\83\67\54\105\72\47\121\118\112\120\111\121\73\54\48\53\65\56\86\88\47\97\119\121\117\70\57\118\85\87\53\78\77\81\80\85\71\79\66\77\47\50\90\71\48\102\53\113\76\55\98\110\89\76\80\120\85\57\83\90\53\79\54\49\55\100\104\102\106\83\99\115\83\108\67\97\101\105\88\108\120\119\51\109\47\78\106\69\122\52\112\51\71\75\107\87\68\102\90\87\53\119\103\113\85\106\65\67\88\77\90\83\49\115\107\50\79\81\88\103\118\47\71\108\56\49\81\110\119\104\122\82\87\43\121\56\56\97\105\87\67\67\51\114\105\99\121\72\76\103\72\111\121\101\47\69\79\48\48\81\113\115\101\69\112\47\108\121\81\80\69\52\57\109\107\76\97\114\89\74\87\70\87\81\71\111\120\51\117\57\65\67\76\79\90\106\116\68\77\68\81\119\72\119\47\100\51\104\90\78\81\43\76\112\55\79\90\86\98\48\70\103\76\70\57\86\106\99\116\57\43\98\74\121\71\70\90\50\89\85\107\119\82\98\87\100\83\106\98\107\121\43\102\65\53\118\79\104\57\115\121\97\57\120\108\110\75\110\66\87\52\100\87\81\110\48\105\52\86\74\52\99\97\84\104\49\114\114\109\69\117\75\110\97\52\83\98\112\98\111\98\68\80\107\116\87\68\107\53\81\48\55\104\100\113\111\56\98\86\79\90\53\86\76\57\121\76\74\116\117\55\104\107\100\50\73\98\115\43\78\117\75\110\108\50\56\72\98\80\105\99\54\73\119\79\50\67\72\86\57\69\77\86\68\69\54\49\71\83\84\49\54\52\84\48\68\113\102\70\86\48\75\84\106\85\89\114\55\104\75\73\104\100\114\98\105\102\119\97\112\78\107\98\116\116\86\108\49\85\106\97\112\52\87\69\73\73\115\74\56\112\117\108\84\79\47\87\71\69\107\47\80\84\49\115\74\109\115\72\106\76\68\80\121\90\104\43\110\71\108\66\49\68\72\65\115\67\83\104\77\119\116\109\51\111\118\88\49\98\121\98\101\108\118\55\81\108\106\82\54\54\89\118\122\67\85\57\70\97\81\68\77\55\90\118\84\74\56\101\87\88\115\82\51\82\52\119\88\106\73\83\97\85\51\113\73\71\71\67\117\74\43\108\82\76\48\112\70\56\103\56\112\79\117\102\110\122\98\114\47\103\74\119\47\74\50\115\87\73\111\68\71\121\115\87\67\83\67\113\77\109\110\100\76\82\53\103\83\113\104\74\99\50\68\111\98\67\55\78\65\77\66\83\86\78\105\107\56\70\97\100\100\83\75\50\116\109\105\89\87\54\47\51\87\116\107\103\72\73\71\71\121\49\52\97\103\84\57\76\111\109\88\68\112\54\107\80\111\114\65\82\67\72\49\55\101\114\122\55\47\82\68\104\115\112\73\51\117\113\116\101\90\110\57\102\87\72\104\81\114\109\73\76\87\57\77\80\119\52\110\88\89\65\53\98\50\69\53\88\50\78\55\57\66\68\85\65\76\82\111\55\57\90\65\73\50\79\89\65\90\66\55\113\65\83\90\68\103\108\109\112\76\81\97\50\47\84\103\49\107\49\55\68\88\106\104\97\57\81\108\98\115\69\51\101\99\49\69\121\98\105\107\88\81\97\77\103\122\76\110\70\73\88\68\113\49\104\105\116\72\83\122\120\56\82\48\108\68\50\110\55\74\83\78\114\72\75\113\104\68\108\122\81\112\82\109\77\53\83\87\74\85\102\56\84\115\87\47\115\89\67\88\48\57\74\86\53\108\89\111\111\47\102\89\90\90\65\74\84\88\85\89\105\52\90\88\117\82\83\99\114\88\73\84\117\120\43\90\114\76\56\106\97\121\102\98\108\87\52\55\49\119\79\51\115\67\109\75\70\43\117\47\113\103\83\108\108\73\98\47\73\48\72\85\108\85\70\56\120\80\97\109\102\120\108\75\83\77\66\118\48\83\119\43\52\47\72\121\97\51\82\98\55\117\105\79\104\76\100\112\100\113\110\107\84\72\116\97\107\56\106\105\83\67\54\53\108\112\119\103\83\116\110\83\107\66\56\75\118\105\115\76\97\57\49\99\55\71\106\101\85\108\74\113\51\103\105\90\79\76\109\107\111\118\50\103\98\84\118\107\73\88\122\119\115\53\103\97\84\109\115\117\84\110\72\43\84\97\52\75\83\67\88\76\105\115\89\97\98\107\98\112\78\66\55\104\97\72\73\107\115\57\72\47\81\113\54\119\50\99\121\67\72\78\47\70\110\103\86\88\116\55\66\86\51\90\47\87\68\71\84\75\52\110\88\55\78\113\54\111\47\70\117\71\69\75\66\119\97\67\90\79\71\75\72\79\79\112\99\99\54\108\119\83\70\70\81\52\110\111\105\113\57\68\112\84\56\99\49\113\119\81\68\73\97\66\69\99\70\51\116\66\120\103\110\73\84\98\106\56\107\79\100\116\109\113\107\103\81\89\77\97\55\107\118\119\55\108\97\100\83\89\83\72\88\86\52\52\86\120\100\74\103\110\51\106\76\50\82\86\81\53\116\77\106\81\69\119\84\65\70\120\66\106\118\81\55\98\43\68\87\48\81\89\82\101\77\88\47\70\108\121\43\98\104\113\49\106\67\122\47\49\88\73\108\78\56\104\57\81\118\54\67\81\73\97\68\49\43\74\66\109\69\84\71\43\112\57\99\85\98\86\71\106\82\81\85\52\111\81\119\79\77\66\71\43\43\98\70\104\71\76\49\65\109\110\73\69\73\119\98\65\55\113\70\110\68\82\56\104\119\84\115\107\79\54\118\108\104\53\102\109\54\77\73\47\84\106\105\113\52\70\69\85\109\70\78\103\90\100\57\53\87\88\66\90\50\103\106\48\117\65\86\76\73\97\51\66\73\100\101\77\115\72\74\68\86\101\100\55\105\87\50\119\107\116\82\85\122\68\97\66\66\110\119\87\71\74\72\87\74\89\49\106\122\86\43\122\69\50\112\50\47\51\108\49\121\107\54\49\68\65\47\86\118\70\77\113\122\103\80\111\112\101\111\119\65\43\87\108\100\102\85\120\75\88\74\113\72\81\104\48\48\68\120\66\77\43\99\114\75\57\55\75\98\73\48\108\122\56\75\104\84\55\115\106\53\105\119\116\76\50\111\71\103\76\118\105\70\87\77\102\70\107\54\105\119\112\66\89\79\68\67\103\118\89\80\56\55\120\97\110\72\50\111\88\75\85\75\83\122\116\112\102\102\53\121\121\50\119\57\56\119\49\76\67\104\67\78\86\102\121\75\114\43\113\99\112\53\109\78\70\75\117\121\113\105\52\100\120\85\82\79\65\43\51\89\53\101\72\111\74\51\107\79\108\85\122\105\87\53\50\67\80\85\67\103\100\49\80\104\88\112\111\47\54\97\116\81\71\79\47\85\109\117\73\99\47\117\52\109\51\49\77\68\77\68\118\48\97\100\49\52\117\111\70\50\57\84\99\104\47\105\65\70\67\79\78\70\108\110\97\51\84\108\113\118\116\47\112\72\68\90\103\81\55\66\43\57\112\43\85\120\120\50\122\99\106\89\67\84\82\90\67\113\66\121\89\117\51\111\52\103\76\114\86\116\118\78\109\71\81\57\119\83\76\79\84\66\114\119\101\121\110\71\73\67\69\112\56\109\103\97\48\83\102\89\107\117\104\102\75\109\105\89\98\104\86\97\66\99\69\49\53\102\121\118\65\111\79\73\101\82\103\66\111\67\51\65\74\122\50\73\88\87\72\72\104\72\79\106\113\50\71\117\97\118\48\107\104\106\111\101\70\53\80\104\118\84\56\102\69\84\65\121\118\70\53\82\116\47\80\110\100\118\117\87\79\119\122\118\103\100\98\53\109\50\109\120\43\82\86\118\87\116\116\111\81\98\120\56\79\79\83\118\67\71\57\104\119\55\71\87\84\117\72\70\90\77\110\81\120\82\113\97\89\54\84\73\80\102\81\71\81\71\51\106\77\105\74\84\89\52\109\114\111\99\53\57\101\101\52\84\83\105\106\72\82\65\69\110\99\54\73\53\115\102\74\53\82\56\66\50\89\112\90\101\71\109\52\81\78\122\68\110\66\122\103\87\75\57\75\115\84\118\53\111\111\75\120\98\43\48\75\48\119\120\99\54\113\120\105\87\90\52\85\101\72\67\118\78\122\115\53\116\83\80\56\117\120\81\51\78\116\85\110\112\43\51\79\74\100\43\79\104\72\107\72\109\116\112\118\77\43\111\74\98\77\90\106\80\81\55\66\115\76\69\55\108\47\47\55\105\84\120\87\82\115\82\111\53\122\86\114\52\113\73\109\67\78\49\87\47\103\78\109\101\117\88\66\77\106\98\85\70\89\114\122\53\121\105\43\122\119\118\121\79\97\86\48\112\105\68\122\81\89\43\114\111\55\66\85\122\88\85\52\113\77\111\120\113\71\113\102\53\47\122\68\99\84\65\89\101\70\79\57\54\85\47\119\109\67\87\89\112\108\85\74\114\118\51\65\116\115\105\120\67\54\75\83\73\107\71\97\52\79\88\100\87\108\89\104\69\88\75\72\114\107\66\75\43\98\106\104\77\112\102\53\80\87\48\122\107\78\110\99\57\116\51\117\120\56\122\68\100\101\76\117\84\81\112\85\81\108\114\103\102\68\105\77\106\99\90\116\89\90\89\118\102\68\71\79\103\113\112\119\65\89\84\83\119\79\101\49\80\78\66\109\69\55\115\81\53\110\52\120\48\66\70\107\122\54\81\70\117\43\120\81\48\115\67\86\84\67\52\84\100\75\77\116\67\121\53\117\52\83\112\67\69\70\51\84\81\75\111\104\54\43\65\86\101\75\106\50\84\71\87\102\102\56\81\52\81\56\53\77\110\68\52\71\73\83\89\65\112\111\51\72\86\99\120\101\97\105\113\90\116\55\117\102\54\66\89\48\113\113\81\108\49\102\85\122\56\56\49\65\76\102\72\52\121\47\98\97\102\86\112\102\119\81\47\69\122\121\78\43\74\51\107\108\57\68\85\86\79\122\119\97\79\111\108\73\56\113\115\108\51\55\84\88\75\56\74\120\98\71\120\90\106\65\48\57\98\120\72\79\100\105\99\76\84\67\89\102\56\48\54\76\121\103\121\104\77\100\88\54\84\103\106\117\76\70\48\106\101\55\120\97\49\54\84\121\50\89\72\110\101\48\108\87\85\113\78\53\115\107\98\110\65\70\76\102\84\97\75\74\105\67\101\47\43\115\103\120\82\112\68\80\79\118\54\117\122\118\122\72\76\47\69\101\83\52\98\97\73\115\55\116\78\114\54\81\43\101\54\107\54\69\43\86\74\53\50\97\75\56\113\102\116\103\69\84\80\120\89\89\119\98\67\84\49\72\48\80\108\99\106\118\69\74\108\77\101\85\78\86\76\113\66\117\100\75\120\68\69\56\55\97\102\82\53\48\47\112\74\85\110\117\77\71\111\107\52\120\118\83\82\106\47\101\90\70\68\66\108\122\54\65\108\54\66\78\54\50\98\77\80\84\99\50\53\121\121\121\83\71\113\56\49\103\97\53\47\100\56\51\83\118\57\102\84\68\107\119\122\50\120\56\78\104\99\53\54\71\118\88\117\116\53\80\106\57\122\115\100\121\112\73\80\117\99\67\78\82\78\104\86\47\115\105\84\78\97\88\121\65\57\86\56\97\70\71\97\122\50\83\87\113\122\102\51\120\101\104\118\78\120\76\101\84\97\88\47\122\119\85\111\57\113\114\109\119\106\85\47\102\78\84\49\100\72\78\56\54\69\119\82\90\65\72\70\80\98\77\104\55\89\120\67\90\112\100\85\121\70\71\86\115\105\115\99\105\104\74\116\65\90\99\104\43\69\100\81\50\120\77\76\43\51\83\106\51\84\49\121\114\108\104\113\102\107\70\82\67\83\56\55\77\101\81\48\67\121\77\115\49\51\98\107\73\104\111\100\76\97\81\121\43\111\99\120\55\110\102\75\89\74\87\98\122\66\85\54\90\43\82\98\78\106\112\105\121\113\80\57\78\99\113\87\104\75\71\115\103\73\54\67\121\120\47\84\55\71\116\122\88\106\83\68\55\47\112\109\110\87\79\90\104\119\68\65\51\110\72\43\120\54\78\82\84\69\100\49\71\90\54\121\80\80\86\51\108\114\87\101\69\43\83\70\102\75\47\87\110\54\102\89\85\117\100\99\101\55\74\117\79\82\49\88\99\84\51\57\77\113\75\68\122\67\47\79\99\70\122\117\114\112\111\80\84\97\48\47\106\51\66\108\122\51\109\89\56\110\77\51\122\84\81\70\87\121\115\100\100\108\82\110\48\72\113\69\83\55\57\115\77\79\114\53\74\119\112\76\115\56\121\77\77\102\70\52\100\49\109\70\69\90\118\66\74\78\55\80\98\67\48\101\72\98\105\72\99\54\80\65\113\76\75\78\113\89\69\97\111\98\85\90\79\107\53\113\119\70\52\85\103\85\106\80\114\70\67\97\115\79\121\71\69\65\100\102\99\100\99\71\71\70\90\78\114\121\43\67\79\85\105\85\55\52\120\56\98\79\85\112\55\97\73\88\50\109\111\70\76\109\114\113\114\52\88\55\78\120\102\72\68\87\54\103\43\114\69\52\98\53\99\99\86\113\82\71\80\81\79\67\89\121\55\65\49\73\113\70\104\84\69\99\98\74\84\108\83\54\74\48\84\49\88\122\66\119\74\108\76\110\68\47\87\120\56\51\110\108\68\121\86\85\52\86\83\67\54\84\79\70\98\78\117\108\116\121\54\117\68\50\98\90\73\103\113\116\102\82\83\80\55\43\114\77\112\53\51\113\97\72\83\53\101\116\122\71\111\110\86\107\80\102\114\50\119\75\90\121\90\76\69\81\71\110\81\88\122\48\52\98\69\69\51\85\120\71\73\50\49\115\121\112\53\122\87\56\68\77\52\47\100\119\66\120\43\47\54\101\52\104\115\65\53\122\66\89\68\108\119\112\103\121\116\88\47\43\48\98\108\70\83\101\99\108\52\80\84\120\84\51\80\87\90\53\80\99\83\49\101\53\90\53\90\116\80\113\43\67\66\73\119\101\54\102\117\77\78\55\102\67\54\116\108\120\116\48\71\53\100\97\102\72\49\122\56\81\101\107\65\66\48\54\97\84\49\56\57\81\119\81\98\56\119\76\71\112\108\66\68\113\68\101\112\78\51\76\72\79\65\82\78\104\82\52\50\107\90\122\76\56\65\119\119\110\87\119\71\69\52\70\113\89\102\79\47\70\109\54\103\76\80\50\90\70\100\98\109\121\106\105\113\115\115\79\54\82\89\104\105\109\115\80\120\68\82\70\56\116\72\110\55\88\122\73\50\105\88\112\69\77\108\86\52\61";local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIII='NGI2d3Q8YSp3KmsvYWc9K0c6dw==';local karrotlIIlIIlI=function(a,b)local c=karrotlIIlIlIl(karrotlIIlIllI(a))local d=c["\99\105\112\104\101\114"](c,karrotlIIlIllI(b))return karrotlIIlIllI(d)end;local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIll='\97\121\107\116\88\49\78\108\75\108\112\53\99\106\86\111\100\106\111\114\78\107\66\79\77\119\61\61';local karrotlIIllIIl='\107\97\114\114\111\116\32\102\114\101\101\32\111\98\102\117\115\99\97\116\105\111\110';local karrotlIIlIIII='OS5nRkJxRlY8XydZaSZ2OXdEb3t7I2EkNmcvbyxdZVYvZy86Mjg=';function karrotlIIlIlll(a,b)local c=karrotlIIlIllI(a,b);local d=karrotlIIllIlI;return c,d end;return karrotlIIlIlII(karrotlIIlIIlI(karrotlIIllIll,karrotlIIlIIIl),getfenv(0))()end)()
